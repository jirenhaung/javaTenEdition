jsp页面由：静态内容，指令，表达式，小脚本，声明和注释组成
指令：page指令：通常位于jsp页面的顶端，一个页面可以有多个page指令
	include指令：将一个外部文件嵌入到当前jsp页面，同时解析这个页面中的jsp语句
	taglib指令：使用标签库定义新的自定义标签，在jsp页面中启动定制行为
jsp注释：<!-- html注释-->//客户端可见
		<%--html注释--%>//客户端不可见
		jsp脚本注释（客户端不可见）://单行注释；/**/多行注释	
jsp脚本：在jsp页面中执行的java代码
		语法：<%java代码%>
Jsp声明:在jsp页面中定义变量或者方法
	       语法：<%!java代码>
Jsp表达式：在jsp页面中执行的表达式
		语法：<%=表达式%>//注意：表达式不以分号结束
JSP文件编写好发布后（用户发出请求）。如果是第一次请求，则通过"JSP页面引擎"把该JSP文件转换为一个Servlet程序
（其本质就是个java类），并生成字节码文件(.class)，同时执行jspInit()方法生成jSP页面的字节码文件，
在对此(jSP页面的字节码文件)字节码文件进行解析并执行jspService（）方法，此(jspService（）)）方法用来处理
用户的请求。如果不是第一次请求，则直接访问曾经生成字节码文件，然后解析并执行jspService()方法。

jsp内置对象是web容器创建的一组对象，不使用new关键字就可以使用的内置对象
jsp一共有九大内置对象：out,request,response,session,application（常用）
				Page,pageContext,exception,config
Web程序的请求响应模式
	用户发送请求（request）
	服务器给用户响应（response）		
out对象是jspWriter类的实例，是向客户端输出内容的常用对象
	常用方法如下：
	void println()向客户端打印字符串
	void clear()清除缓存区的内容，如果在flush之后调用会抛出异常
	void clearBuffer()清除缓存区的内容，如果在flush之后调用不会抛出异常
	void flush()将缓存区内容输出到客户端
	int geBufferSize()返回缓冲区以字节数的大小，如不设缓冲区则为0
	int getRemainning()0返回缓冲区还剩余多少可用
	Boolean isAutoFlush()返回缓冲区满时i，是自动清空还是抛出异常
	Void close()关闭输出流

Get与post区别
<form name=”regForm” action=”动作” method=“提交方式”></form>
表单有两种提交方式：get与post
	get:以明文的方式通过url提交数据，数据在url中可以看到，提交的数最多不超过2kb。
	安全性较低但效率比post高。适合提交量不大，安全性不高的数据。比如：搜索，查询等功能。
	
	post:将用户提交的信息封装在html header内。适合提交数据量大，安全性高的用户信息。
	比如：注册，修改，上传等功能。

request对象
 客户端的请求信息封装在request对象中，通过它才能了解到客户的需求，然后做出响应,
 它是HttpServletRequest类的实例.request对象具有请求域，即完成客户端的请求之前,该对象一直有效
常用方法:
	request.getParameter(String name)返回name指定参数的参数值
	request.getParameterValues(String name)返回包含参数name的所有值的数组
中文乱码问题：
	中文乱码问题: 因为在jsp页面里面，tomcat默认的字符集不是中文,所以要在发送页面设置字符串编码,
	接受页的编码也要一致，可以通过request.setChareacterEncoding("utf-8")来设置。url方式发送请求参数
	<a href="jspDemo01.jsp?username=张三">测试URL传递参数</a>
	url参数传递中文会有乱码问题，并且通过request.setCharacterEncoding("utf-8")不能解决
	需要去tomcat中的service.xml中的contract后加上URIEncoding="UTF-8"进行配置

Request对象常用方法有：
（1）String getParameter(String name) 返回name指定参数的参数值
（2）String[] getParameterValues(String name) 返回包含参数name的所有值的数组
（3）void set Attribute(String Object) 存储此请求中的属性
（4）object getAttribute(String name) 返回指定属性的属性值
（5）String getContentType() 得到请求体的MIME
（6）String getContentLength() 返回请求文件的长度
（7）String getContentextPath 返回请求文件的上下文路径
（8）String getRealPath(‘request.jsp’) 返回请求的真实路径
（9）String get Protocol() 返回请求用的协议类型及版本号
（10）String getServerName() 返回接受请求的服务器主机名
（11）String getRemoteAddr() 返回客户端的IP地址

response内置对象
 response对象包含相应客户请求的有关信息。是HttpServerletResponse类的实例。它具有页面作用域。
 访问一个页面时，该页面内的response对象只能对这次访问有效，其他页面的response对象对当前页面无效。
 String getCharacterEncoding()
 void setContentType(String type)
 PrintWriter getWriter() 返回可以向客户端输出字符的一个对象,与out有区别
 void sendRedirect(java.lang.String location)重新定向客户端请求response对象的 PrintWriter outer=response.getWriter();outer.println("123");
生成的outer打印的顺序要在out内置对象的前面。如果想要out先打印在网页，可以out.flush();

请求重定向和请求转发
	请求转发：request.getRequestDispatcher("**.jsp").forward(request,respone)，
		服务器端行为，一次性请求，转发后请求对象保存，url不会变
	请求重定向：response.sendRediret(**.jsp)，客户端行为，等同于两次请求，对象不保存，url会变
	
session： 表示客户端与服务器的一次回话。一个时间概念
 	从进入网站到浏览器关闭所经过的这段时间，就是浏览这个网站所花费的时间。
 	session保存在服务器的内存中，每个用户对应一个session。
session对象
	session对象是一个JSP内置对象
	session对象在第一个JSP页面被装载时自动创建，完成会话期管理
	一个客户从打开浏览器并链接到服务器开始，到客户关闭浏览器离开这个服务器结束，被称为一个会话
	当一个客户访问一个服务器时，可能会在服务器的几个页面之间切换，服务器应该通过某种办法知道这是一个客户，就需要session对象
	session对象是HttpSession类的实例	
	
application对象
	application对象实现了用户间的数据共享，可存放全局变量。
	application开始于服务器的启动，终止于服务器的关闭。
	在用户的前后连接或不同用户之间的连接中，可以对application对象的同一属性进行操作。
   	在任何地方对application对象属性的操作，都将影响到其他用户对此的访问。 
 	 服务器的启动和关闭决定了application对象的生命
   	application对象是ServletContext类的实例。
application对象的方法
  1. public	void setAttribute（String name，Object value）使用指定名称将对象绑定到此会话。
  2. public Object getAttribute（String name）返回与此会话中的指定名称绑定在一起的对象，如果没有绑定在该名称下，则返回null。
  3. Enumeration getAttributeNames（）返回所有可用属性名的枚举
  4. String getServerInfo（）返回JSP（Servlet）引擎及版本号

pageContext对象
	pageContext对象提供了对JSP页面内所有对象及名字空间的访问
	pageContext对象可以访问到本页所在的session，也可以取本页面所在的application的某一属性值
	pageContext对象相当于页面中所有功能的集大成者
	pageContext对象的本类名也叫pageContext

JSP内置对象 - Exception
（1）Exception是java.lang.Throwable类的实例
（2）当一个页面运行发生了异常，就产生了该Exception对象。
 (3) 若需要捕获异常，需在page指令中写属性errorpage=“出错跳转到的页面”   
（4）若一个JSP页面要使用该Exception对象，需要在page指令中将isErrorPage的值设为true，否则无法编译
Exception对象常用方法：
（1）String getMessage() 返回描述异常的信息
（2）String toString() 返回关于异常的简短描述信息
（3）void printStackTrace() 显示异常及其栈轨迹
（4）Throwable FillInStackTrace() 重写异常的执行栈轨迹
部分浏览器（IE）跳转不了，在exception.jsp页面另外写一句:<% response.setStatus(200); %>

JSP动作元素，动作元素为请求处理阶段提供信息。动作元素遵循xml元素的语法，有一个包含元素名的开始标签，
可以有属性、可选的内容、与开始标签匹配的结束标签。
分为五大类
	第一类是与存取JavaBean 有关的，包括：
		<jsp:useBean>  <jsp:setProperty> <jsp:getProperty>
	第二类是JSP1.2就开始有的基本元素，包括6个动作元素
		<jsp:include> <jsp:forward> <jsp:param> <jsp:plugin> <jsp:params> <jsp:fallback>
	第三类是 JSP2.0新增加的元素，主要与JSP Document有关，包括六个元素
		<jsp:root> <jsp:declaration> <jsp:scriptlet> <jsp:expression> <jsp:text> <jsp:output>
	第四类是JSP2.0新增的动作元素，主要是用来动态生成XML元素标签的值，包括3个动作
		<jsp:attribute> <jsp:body> <jsp:element>
	第五类是JSP2.0新增的动作元素，主要是用在Tag File中，有2个元素
		<jap:invoke> <jsp:dobody>
<jsp:useBeans>
作用：在jsp页面中实例化或者在指定范围内使用javaBean:
<jsp:useBean id="标识符" class="类（全名，包括包名）" scope="作用范围（默认是page）"/>

setProperty作用：给已经实例化的JavaBean对象的属性赋值，一共有四种形式。
	A、与表单相关联
	<jsp:setProperty name="javabean实例名" property="*"/>（表单全部匹配上的）
	<jsp:setProperty name="javabean实例名" property="javabean属性名"/>（部分）
	B、手工设置
	<jsp:setProperty name="javabean实例名" property="javabean属性名" value="javabean属性值"/>
	C、与request参数关联
	<jsp:setProperty name="javabean实例名" property="javabean属性名" param="request对象中的参数名"/>
	
getProperty作用：获取指定javabean对象的属性值。
	〈jsp:getProperty name="javabean实例名" property="javabean属性名"〉

javaBean的四种作用域
	page//仅在当前页面有效
	request//可以通过HttpRequest.getAttribute()方法取得JavaBean对象
	session//可以通过HttpSession.getAttribute()方法取得JavsBean对象
	application//可以通过application.getAttribute()方法获得JavaBean对象	

http协议的无状态性：无状态是指，当浏览器发送请求给服务器的时候，服务器响应客户端请求。
			      但是当同一个浏览器再次发送请求给服务器的时候，服务器并不知道它就是刚才那个浏览器。
			保存用户状态的两大机制：session和cookie
Cookie是web服务器保存在客户端的一系列文本信息。应用：1.判定注册用户是否已经登陆网站；2.“购物车”的处理；
	3.记录浏览过的视频；4.记住用户名和密码实现自动登录。
	作用：1.对特定对象的跟踪;2.保存用户网页浏览记录与习惯;3.简化登录;
	安全风险：容易泄露用户信息
Cookie在JSP页面中：
	 1.创建：Cookie cookie = new Cookie(String key,Object value)
	 2.写入cookie对象：response.addCookie(cookie)
	 3.读取cookie对象：Cookie[] cookies = request.getCookies();
Cookie常用方法：
	 1.void setMaxAge(int) 设置cookie有效期，单位：秒
	 2.void setValue(String) cookie创建后，对cookie进行赋值
	 3.String getName()获取cookie的名称
	 4.String getValue() 获取cookie的值
	 5.int getMaxAge() 获取cookie的有效时间 单位：秒

使用URLEncoder解决无法在Cookie当中无法保存中文这个问题。需要导入这个包：java.net.*
 URLEncoder.encode(String,"urf-8")（编码）
 URLDecoder.decode(String,"urf-8")（解码）
之所以老师要判断isUseCookies!=null是因为request.getParameterValues在获取一个属性的值时
如果这个属性不存在就会返回null，这个时候如果取其length就会抛出异常。由于不选择复选框，返回结果为""，
所以老师加了一个判断isUseCookies.length>0。

cookie和session的区别：
	cookie：保存在客户端，保存string类型；可长期保存，保存不重要的信息
	session：保存在服务器；保存object类型，随着session生命周期销毁；保存重要的信息

include指令语法：<%@ include file="URL"%>

jsp中的指令是用来设置jsp页面的相关属性，如编码方式和脚本语言等。
	page指令：是为容器提供当前页面的使用说明，一个页面可以包含多个page指令
	include指令：是包含指定文件，如jsp,Html等
	taglib指令：自定义标签是指引入一个自定义标签的集合的定义，包括库路经、自定义标签等

include动作：<jsp:include page="url" flush="true|false"> true:使用缓冲;false:不使用缓冲.
include指令和include动作比较：
	1.发生作用的时间：页面转换期间与请求期间；
	2.包含的内容：文件的实际内容（包含源代码），页面输出（得到的结果）；
	3.转换成的servlet：一个，两个；
	4.编译时间：较慢（资源必须被解析），较快；
	5.执行时间：稍快，较慢（每次资源必须被解析）
<jsp:forward page="URL"> 等同于
<%   
  request.getRequestDispatcher("URL").forward(request,response);
% >

param的语法：
<jsp:param name="参数名" value=“参数值”> 常常与<jsp:forward>动作一起使用，作为其子标签
用于增加或改变从表单传过来的参数的值